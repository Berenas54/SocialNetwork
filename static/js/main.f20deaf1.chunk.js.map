{"version":3,"sources":["components/Navbar/Navbar.module.css","components/Navbar/Sidebar/SideFriend/SideFriend.module.css","components/Dialogs/Dialogs.module.css","components/Navbar/Sidebar/Sidebar.module.css","components/Profile/ProfileInfo/DescriptionBlock.module.css","components/Profile/MyPosts/MyPosts.module.css","components/Profile/MyPosts/Post/Post.module.css","components/Dialogs/DialogItem/DialogItem.module.css","components/Dialogs/Messages/Messages.module.css","serviceWorker.ts","components/Header/Header.tsx","components/Navbar/Sidebar/SideFriend/SideFriend.tsx","components/Navbar/Sidebar/Sidebar.tsx","components/Navbar/Navbar.tsx","components/Profile/MyPosts/Post/Post.tsx","components/Profile/MyPosts/MyPosts.tsx","components/Profile/ProfileInfo/DescriptionBlock.tsx","components/Profile/Profile.tsx","components/Dialogs/DialogItem/DialogItem.tsx","components/Dialogs/Messages/Messages.tsx","components/Dialogs/Dialogs.tsx","App.tsx","redux/state.ts","render.tsx","index.tsx"],"names":["module","exports","Boolean","window","location","hostname","match","unregister","navigator","serviceWorker","ready","then","registration","catch","error","console","message","Header","className","alt","src","SideFriend","props","style","side","figure","avatar","item","to","id","activeClassName","activeLink","name","Sidebar","friendsAsideElement","asideState","asideFriends","map","friends","aside","asideH","wrapperAside","Navbar","nav","state","Post","c","likesCount","MyPosts","postsElement","posts","post","postAdding","value","newPostText","onChange","event","updatePostText","currentTarget","onClick","trim","addPost","DescriptionBlock","background","description","Profile","profilePage","DialogItem","dialogItems","Messages","Dialogs","dialogsElement","messagesPage","dialogs","dialog","messagesElement","messages","newMessageElement","React","createRef","answerField","ref","inputMessage","current","text","addMessage","App","path","render","v1","newPost","push","rerenderEntireTree","updateNewPostText","newText","newMessage","ReactDOM","document","getElementById"],"mappings":"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","file":"static/js/main.f20deaf1.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"nav\":\"Navbar_nav__224qJ\",\"item\":\"Navbar_item__zKUOB\",\"activeLink\":\"Navbar_activeLink__3DF11\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"avatar\":\"SideFriend_avatar__28KJI\",\"item\":\"SideFriend_item__2CXbt\",\"activeLink\":\"SideFriend_activeLink__3ydwZ\",\"figure\":\"SideFriend_figure__3dM1d\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"dialogs\":\"Dialogs_dialogs__FQNq5\",\"answerField\":\"Dialogs_answerField__u9Rri\",\"inputMessage\":\"Dialogs_inputMessage__1CqUv\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"nav\":\"Sidebar_nav__1uMJ8\",\"aside\":\"Sidebar_aside__3H7Nn\",\"asideH\":\"Sidebar_asideH__2uuGl\",\"wrapperAside\":\"Sidebar_wrapperAside__21OpS\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"background\":\"DescriptionBlock_background__2HWA5\",\"avatar\":\"DescriptionBlock_avatar__1sjyQ\",\"description\":\"DescriptionBlock_description__33eT7\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"item\":\"MyPosts_item__XwHRm\",\"postAdding\":\"MyPosts_postAdding__BMDW7\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"item\":\"Post_item__mUkN_\",\"avatar\":\"Post_avatar__2gbdO\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"dialogItems\":\"DialogItem_dialogItems__uqerk\",\"active\":\"DialogItem_active__3nuSS\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"message\":\"Messages_message__RDbVJ\"};","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\r\nimport './Header.css';\r\n\r\nconst Header = () => {\r\n    return <header className='header'>\r\n        <img alt='logo'\r\n    src={\"https://i.pinimg.com/564x/81/cb/9c/81cb9cf335d5cbcf74d093ff869fe92e.jpg\"}/>\r\n    </header>\r\n}\r\nexport default Header","import React from 'react';\r\nimport style from \"./SideFriend.module.css\"\r\nimport {NavLink} from \"react-router-dom\";\r\n\r\ntype SideFriendPropsType = {\r\n    id: string\r\n    avatar: string\r\n    name: string\r\n}\r\nconst SideFriend = (props: SideFriendPropsType) => {\r\n    return <aside className={style.side}>\r\n        <div className={style.figure}>\r\n\r\n            <img className={style.avatar} alt=\"ava\"\r\n                 src={props.avatar}/>\r\n\r\n            <div className={style.item}>\r\n                <NavLink to={\"/friend/\" + props.id} activeClassName={style.activeLink}>{props.name}</NavLink>\r\n            </div>\r\n        </div>\r\n    </aside>\r\n}\r\nexport default SideFriend\r\n","import React from 'react';\r\nimport style from './Sidebar.module.css';\r\nimport SideFriend from \"./SideFriend/SideFriend\";\r\nimport {AsideStateType} from \"../../../redux/state\";\r\n\r\n\r\ntype SidebarPropsType = {\r\n    asideState: AsideStateType\r\n}\r\n\r\nconst Sidebar = (props: SidebarPropsType) => {\r\n    let friendsAsideElement = props.asideState.asideFriends.map(friends => <SideFriend id={friends.id}\r\n                                                                                       name={friends.name}\r\n                                                                                       avatar={friends.avatar}/>)\r\n    return <aside className={style.aside}>\r\n\r\n        <div className={style.asideH}>\r\n            <h3>Friends</h3>\r\n        </div>\r\n        <div className={style.wrapperAside}>\r\n            {friendsAsideElement}\r\n        </div>\r\n\r\n\r\n    </aside>\r\n}\r\nexport default Sidebar","import React from 'react';\r\nimport style from './Navbar.module.css';\r\nimport {NavLink} from \"react-router-dom\";\r\nimport Sidebar from \"./Sidebar/Sidebar\";\r\nimport { RootStateType} from \"../../redux/state\";\r\ntype AppStatePropsType= {\r\n    state:RootStateType}\r\nconst Navbar = (props:AppStatePropsType) => {\r\n    return <nav className={style.nav}>\r\n        <div className={style.item}>\r\n            <NavLink to='/profile' activeClassName={style.activeLink}>Profile</NavLink>\r\n        </div>\r\n        <div className={style.item}>\r\n            <NavLink to='/dialogs' activeClassName={style.activeLink}>Messages</NavLink>\r\n        </div>\r\n        <div className={style.item}>\r\n            <NavLink to='/#!'>News</NavLink>\r\n        </div>\r\n        <div className={style.item}>\r\n            <NavLink to='/#!'>Music</NavLink>\r\n        </div>\r\n        <div className={style.item}>\r\n            <NavLink to='/#!'>Settings</NavLink>\r\n        </div>\r\n    <Sidebar asideState={props.state.asideState}/>\r\n    </nav>\r\n}\r\nexport default Navbar","import React from 'react';\r\nimport c from './Post.module.css';\r\n\r\ntype PostPropsType={\r\n    message:string\r\n    likesCount:number\r\n}\r\nconst Post = (props: PostPropsType) => {\r\n    return <div className={c.item}>\r\n        <img className={c.avatar} alt=\"ava\"\r\n             src='https://pm1.narvii.com/7171/f6f1c4463bbd9959052b699672858647f17660d3r1-264-250v2_00.jpg'/>\r\n        {props.message}\r\n        <div>\r\n            <span>{props.likesCount} Like</span>\r\n        </div>\r\n    </div>\r\n}\r\nexport default Post","import React, {ChangeEvent} from 'react';\r\nimport style from './MyPosts.module.css';\r\nimport Post from \"./Post/Post\";\r\nimport {PostType} from '../../../redux/state';\r\n\r\n\r\ntype MyPostsPropsType = {\r\n    posts: PostType[]\r\n    addPost: (newPostText: string) => void\r\n    updatePostText: (newText: string) => void\r\n    newPostText: string\r\n}\r\n\r\nconst MyPosts = (props: MyPostsPropsType) => {\r\n    let postsElement = props.posts.map(post => <Post message={post.message} likesCount={post.likesCount}/>)\r\n\r\n    const addPost = () => {\r\n        if (props.newPostText.trim()) {\r\n            props.addPost(props.newPostText)\r\n        } else {\r\n            props.updatePostText(\"\")\r\n        }\r\n    }\r\n\r\n    const changeHandler = (event: ChangeEvent<HTMLTextAreaElement>) => {\r\n        props.updatePostText(event.currentTarget.value)\r\n    }\r\n\r\n    return <div className={style.item}>\r\n        <h3>My posts</h3>\r\n        <div className={style.postAdding}>\r\n            <div>\r\n                <textarea value={props.newPostText} onChange={changeHandler}/>\r\n            </div>\r\n            <div>\r\n                <button onClick={addPost}>Add post</button>\r\n            </div>\r\n        </div>\r\n        {postsElement}\r\n    </div>\r\n}\r\nexport default MyPosts","import React from 'react';\r\nimport style from './DescriptionBlock.module.css';\r\n\r\n\r\nconst DescriptionBlock = () => {\r\n    return <div>\r\n        <div>\r\n            <img className={style.background} alt='cats'\r\n                 src='https://icatcare.org/app/uploads/2018/06/Layer-1704-1920x840.jpg'/>\r\n        </div>\r\n        <div>\r\n            <img className={style.avatar} alt=\"ava\"\r\n                 src='https://pm1.narvii.com/7171/f6f1c4463bbd9959052b699672858647f17660d3r1-264-250v2_00.jpg'/>\r\n        </div>\r\n        <div className={style.description}>\r\n            Description\r\n        </div>\r\n    </div>\r\n}\r\n\r\nexport default DescriptionBlock","import React from 'react';\r\n//import style from './Profile.module.css';\r\nimport MyPosts from \"./MyPosts/MyPosts\";\r\nimport DescriptionBlock from \"./ProfileInfo/DescriptionBlock\";\r\nimport {ProfilePageType} from \"../../redux/state\";\r\n\r\ntype ProfilePropsType = {\r\n    profilePage: ProfilePageType\r\n    addPost: () => void\r\n    updatePostText: (newText: string) => void\r\n}\r\n\r\n\r\nconst Profile = (props: ProfilePropsType) => {\r\n    return <div>\r\n        <DescriptionBlock/>\r\n        <MyPosts posts={props.profilePage.posts} addPost={props.addPost} newPostText={props.profilePage.newPostText} updatePostText={props.updatePostText}/>\r\n    </div>\r\n}\r\n\r\nexport default Profile","import React from \"react\";\r\nimport style from \"./DialogItem.module.css\"\r\nimport {NavLink} from \"react-router-dom\";\r\n\r\n\r\ntype DialogItemPropsType={\r\n    name:string\r\n    id:string\r\n}\r\n\r\n\r\nconst DialogItem = (props: DialogItemPropsType) => {\r\n    return <div className={style.dialogItems}>\r\n        <NavLink to={\"/dialogs/\" + props.id}>{props.name}</NavLink>\r\n    </div>\r\n}\r\n\r\nexport default DialogItem","import React from \"react\";\r\nimport style from './Messages.module.css'\r\n\r\n\r\ntype MessagesPropsType={\r\n    message:string\r\n}\r\nconst Messages = (props: MessagesPropsType) => {\r\n    return <div className={style.message}>{props.message}</div>\r\n}\r\n\r\nexport default Messages","import React, {RefObject} from \"react\";\r\nimport style from './Dialogs.module.css';\r\nimport DialogItem from \"./DialogItem/DialogItem\";\r\nimport Messages from \"./Messages/Messages\";\r\nimport {MessagesPageType} from \"../../redux/state\";\r\n\r\ntype DialogsPropsType = {\r\n    messagesPage: MessagesPageType\r\n    addMessage: (message: string) => void\r\n}\r\n\r\nconst Dialogs = (props: DialogsPropsType) => {\r\n    let dialogsElement = props.messagesPage.dialogs.map(dialog => <DialogItem name={dialog.name} id={dialog.id}/>)\r\n\r\n    let messagesElement = props.messagesPage.messages.map(message => <Messages message={message.message}/>)\r\n\r\n    let newMessageElement: RefObject<HTMLTextAreaElement> = React.createRef()\r\n\r\n    let newMessage = () => {\r\n        if (newMessageElement.current) {\r\n            let text = newMessageElement.current.value\r\n            props.addMessage(text)\r\n            newMessageElement.current.value=\"\"\r\n        }\r\n    }\r\n\r\n    return (\r\n        <div className={style.dialogs}>\r\n            <div className={style.dialogItems}>\r\n                {dialogsElement}\r\n            </div>\r\n            <div className={style.messages}>\r\n                {messagesElement}\r\n                <div className={style.answerField}>\r\n                    <textarea ref={newMessageElement} className={style.inputMessage}/>\r\n                    <button onClick={newMessage}>Send</button>\r\n                </div>\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\nexport default Dialogs","import React from 'react';\r\nimport './App.css';\r\nimport Header from \"./components/Header/Header\";\r\nimport Navbar from \"./components/Navbar/Navbar\";\r\nimport Profile from \"./components/Profile/Profile\";\r\nimport Dialogs from \"./components/Dialogs/Dialogs\"\r\nimport {RootStateType} from './redux/state'\r\nimport {Route} from 'react-router-dom';\r\n\r\ntype AppStatePropsType = {\r\n    state: RootStateType\r\n    addPost: () => void\r\n    addMessage: (message: string) => void\r\n    updatePostText:(newText:string) => void\r\n}\r\n\r\nfunction App(props: AppStatePropsType) {\r\n    return (<div className='app_wrapper'>\r\n            <Header/>\r\n            <Navbar state={props.state}/>\r\n            <div className=\"app_wrapper_content\">\r\n                <Route path='/dialogs' render={() => <Dialogs messagesPage={props.state.messagesPage} addMessage={props.addMessage}/>}/>\r\n                <Route path='/profile'\r\n                       render={() => <Profile profilePage={props.state.profilePage} addPost={props.addPost} updatePostText={props.updatePostText}/>}/>\r\n            </div>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default App;","import {rerenderEntireTree} from \"../render\";\r\nimport {v1} from \"uuid\";\r\n\r\nlet state: RootStateType = {\r\n    profilePage: {\r\n        posts: [\r\n            {id: v1(), message: \"My first post!\", likesCount: 41},\r\n            {id: v1(), message: \"Second post\", likesCount: 22},\r\n            {id: v1(), message: 'I live React', likesCount: 31},\r\n            {id: v1(), message: \"Awesome!!!\", likesCount: 421}],\r\n        newPostText: \"\"\r\n    },\r\n    messagesPage: {\r\n        messages: [\r\n            {id: v1(), message: \"HI, brother!\"},\r\n            {id: v1(), message: \"Wtf\"},\r\n            {id: v1(), message: \"I love you\"},\r\n            {id: v1(), message: \"Where is my money?\"},\r\n        ],\r\n        dialogs: [\r\n            {id: v1(), name: \"Dzimych\"},\r\n            {id: v1(), name: \"Sveta\"},\r\n            {id: v1(), name: \"Pasha\"},\r\n            {id: v1(), name: \"Gleb\"},\r\n            {id: v1(), name: \"Vika\"}\r\n        ]\r\n    },\r\n    asideState: {\r\n        asideFriends: [\r\n            {\r\n                id: v1(),\r\n                avatar: 'https://encrypted-tbn0.gstatic.com/images?q=tbn%3AANd9GcT6Ghz_3vVX362NspWGVByszfbkVlJ77tisTQ&usqp=CAU',\r\n                name: 'Pavel'\r\n            },\r\n            {\r\n                id: v1(),\r\n                avatar: 'https://klike.net/uploads/posts/2019-03/1551511801_1.jpg',\r\n                name: 'Vika'\r\n            },\r\n            {\r\n                id: v1(),\r\n                avatar: 'https://tiktok-wiki.ru/wp-content/uploads/2020/05/avatarki-dlya-tik-toka1.jpg',\r\n                name: 'Alex'\r\n            }\r\n        ]\r\n    }\r\n}\r\nexport let addPost = () => {\r\n    let newPost: PostType = {\r\n        id: v1(),\r\n        message: state.profilePage.newPostText,\r\n        likesCount: 0\r\n    }\r\n    state.profilePage.posts.push(newPost)\r\n    state.profilePage.newPostText=\"\"\r\n    rerenderEntireTree(state)\r\n}\r\nexport let updateNewPostText = (newText: string) => {\r\n    state.profilePage.newPostText = newText\r\n    rerenderEntireTree(state)\r\n}\r\n\r\nexport let addMessage = (message: string) => {\r\n    let newMessage: MessageType = {\r\n        id: v1(),\r\n        message: message\r\n    }\r\n    state.messagesPage.messages.push(newMessage)\r\n    rerenderEntireTree(state)\r\n}\r\n\r\nexport type  AsideStateType = {\r\n    asideFriends: Array<AsideFriendsType>\r\n}\r\nexport type  AsideFriendsType = {\r\n    id: string\r\n    avatar: string\r\n    name: string\r\n}\r\nexport type MessageType = {\r\n    id: string\r\n    message: string\r\n}\r\nexport type DialogType = {\r\n    id: string\r\n    name: string\r\n}\r\nexport type PostType = {\r\n    id: string\r\n    message: string\r\n    likesCount: number\r\n}\r\nexport type ProfilePageType = {\r\n    posts: Array<PostType>\r\n    newPostText: string\r\n}\r\nexport type MessagesPageType = {\r\n    messages: Array<MessageType>\r\n    dialogs: Array<DialogType>\r\n}\r\nexport type RootStateType = {\r\n    profilePage: ProfilePageType\r\n    messagesPage: MessagesPageType\r\n    asideState: AsideStateType\r\n}\r\n\r\n\r\nexport default state","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\nimport {BrowserRouter} from \"react-router-dom\";\r\nimport {addMessage, addPost, RootStateType, updateNewPostText} from \"./redux/state\";\r\n\r\nexport let rerenderEntireTree =(state:RootStateType)=>{\r\nReactDOM.render(\r\n        <BrowserRouter>\r\n        <App state={state} addPost={addPost} addMessage={addMessage} updatePostText={updateNewPostText}/>\r\n        </BrowserRouter>,\r\n    document.getElementById('root')\r\n);}\r\n\r\nserviceWorker.unregister();\r\n","import './index.css';\r\nimport * as serviceWorker from './serviceWorker';\r\nimport {rerenderEntireTree} from \"./render\";\r\nimport state from \"./redux/state\";\r\n\r\nrerenderEntireTree(state)\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}